<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Smart Bins</title>
    <link rel="stylesheet" href="/styles.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
</head>
<body>
    <div class="main__section">
        <h1 class="form__heading">Smart Bin Details</h1>
        <form action="/new" method="post">
            <div class="container">
                <div class="mb-3">
                    <label for="exampleFormControlInput1" class="form-label">Name</label>
                    <input name="name" type="text" class="form-control" id="exampleFormControlInput1" placeholder="Smart Bin Name" value="<%= data.name %>" disabled>
                </div>
                <div class="mb-3">
                    <label for="exampleFormControlInput1" class="form-label">Location</label>
                    <input name="location" type="text" class="form-control" id="exampleFormControlInput1" placeholder="Location" value="<%= data.location %>" disabled>
                </div>
                <div class="mb-3">
                    <label for="exampleFormControlInput1" class="form-label">Latitude</label>
                    <input name="lat" type="text" class="form-control" id="exampleFormControlInput1" placeholder="Latitude of smart bin" value="<%= data.lat %>" disabled>
                </div>
                <div class="mb-3">
                    <label for="exampleFormControlInput1" class="form-label">Longitude</label>
                    <input name="lon" type="text" class="form-control" id="exampleFormControlInput1" placeholder="Longitude of smart bin" value="<%= data.lon %>" disabled>
                </div>
                <label for="exampleFormControlInput1" class="form-label">Code</label>
                <div class="code__section">
                    
                    <pre>
                            
                            #include Servo.h
                            #include ESP8266HTTPClient.h
                            #include ESP8266WiFi.h
                            
                            Servo servo1;
                            
                            int ID = <%= data.id %>;
                            
                            int ssid = "Wifi Name";
                            int pass = "Wifi Password";
                            
                            int GreenPin = 12;
                            int RedPin = 13;
                            
                            int trigPin = 9;
                            int echoPin = 8;
                            
                            int trigPin1 = 6;
                            int echoPin1 = 5;
                            
                            long distance;
                            long duration;
                            
                            long distance1;
                            long duration1;
                            
                            void setup() {
                              Serial.begin(115200);                         //Serial connection
                              WiFi.begin(ssid,pass);                        //WiFi connection
                              while (WiFi.status() != WL_CONNECTED) {       //Wait for the WiFI connection completion
                                delay(500);
                                Serial.println("Waiting for connection");
                              }
                              servo1.attach(7); 
                              pinMode(GreenPin, OUTPUT);
                              pinMode(RedPin,OUTPUT);
                              pinMode(trigPin, OUTPUT);
                              pinMode(echoPin, INPUT);                      // put your setup code here, to run once:
                              pinMode(trigPin1, OUTPUT);
                              pinMode(echoPin1, INPUT);//
                            }
                            
                            void loop(){
                              ultra_sonic();
                              ultra_sonic1();
                              servo1.write(0);
                              if(distance <=9){
                                servo1.write(270);
                                delay(2000);
                              }
                              if(distance1 <=2){
                                 digitalWrite(RedPin,HIGH);
                                 digitalWrite(GreenPin,LOW);
                                 if (WiFi.status() == WL_CONNECTED) {                   //Check WiFi connection status
                                    HTTPClient http;                                    //Declare object of class HTTPClient
                                    http.begin("https://smart-bin-sastra.herokuapp.com/update/" + ID);       //Specify request destination
                                    http.addHeader("Content-Type", "text/plain");       //Specify content-type header
                                    int httpCode = http.POST("Message from ESP8266");   //Send the request
                                    String payload = http.getString();                  //Get the response payload
                                    Serial.println(httpCode);                           //Print HTTP return code
                                    Serial.println(payload);                            //Print request response payload
                                    http.end();                                         //Close connection
                                }
                              }
                              else{
                                 digitalWrite(RedPin,LOW);
                                 digitalWrite(GreenPin,HIGH);
                              }
                            }
                            
                            void ultra_sonic(){
                              digitalWrite(trigPin, LOW);
                              delayMicroseconds(2);
                              digitalWrite(trigPin, HIGH);
                              delayMicroseconds(10);
                              digitalWrite(trigPin, LOW);
                              duration = pulseIn(echoPin, HIGH);
                              distance = duration*0.034/6;
                            }
                            
                            void ultra_sonic1(){
                              digitalWrite(trigPin1, LOW);
                              delayMicroseconds(2);
                              digitalWrite(trigPin1, HIGH);
                              delayMicroseconds(10);
                              digitalWrite(trigPin1, LOW);
                              duration1 = pulseIn(echoPin1, HIGH);
                              distance1 = duration1*0.034/6;
                            }
                    </pre>
                </div>
            </div>
        </form>
    </div>
</body>
</html>